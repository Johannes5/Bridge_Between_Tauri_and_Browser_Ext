;
// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import * as React from "react"

import { ILink } from "~/types/links.types"

import {
  DefaultLinkItemProps,
  PlasmicLinkItem
} from "./plasmic/short_stop/PlasmicLinkItem"

export interface LinkItemProps extends DefaultLinkItemProps {
  linkUrl: string
  updateLink?: (name: string, url: string) => void
  handleDelete?: () => void
  link: ILink
}

function LinkItem_(
  {
    linkUrl,
    updateLink,
    handleDelete,
    link,
    customizingLinks,
    ...props
  }: LinkItemProps,
  ref: React.LegacyRef<HTMLDivElement>
) {
  const { attributes, listeners, setNodeRef, transform, transition } =
    useSortable({
      id: link.uuid
    })
  const [hovered, setHovered] = React.useState(false)
  const [isEditing, setIsEditing] = React.useState(false)
  const [editLinkData, setEditLinkData] = React.useState({
    name: props?.linkName as string,
    url: linkUrl
  })

  function handleChange(key: keyof typeof editLinkData, value: string) {
    setEditLinkData({
      ...editLinkData,
      [key]: value
    })
  }

  function addProtocolIfMissing(url: string) {
    if (url.startsWith("http://") || url.startsWith("https://")) return url
    return `https://${url}`
  }

  const style = {
    transition,
    transform: CSS.Transform.toString(transform)
  }

  return (
    <div
      ref={setNodeRef}
      style={style}
      onMouseOver={() => setHovered(true)}
      onMouseOut={() => setHovered(false)}>
      <PlasmicLinkItem
        favicon={
          <img
            src={`https://www.google.com/s2/favicons?domain=${linkUrl}`}
            alt={`Favicon for ${linkUrl}`}
          />
        }
        linkButton={{
          onClick: (e) => {
            e.preventDefault()
            e.stopPropagation()
            window.location.href = addProtocolIfMissing(linkUrl)
          }
          // onClick: () => window.open(addProtocolIfMissing(linkUrl), "_blank")
        }}
        grabHandle={{
          ...attributes,
          ...listeners
        }}
        // isEditModeOn={false}
        isEditModeOn={customizingLinks && hovered}
        addingForm={{
          updateLink: (name, url) => {
            updateLink && updateLink(name, url)
            setIsEditing(false)
          },
          values: editLinkData,
          handleChange: handleChange
        }}
        editButton={{
          onClick: (e) => {
            e.preventDefault()
            e.stopPropagation()
            setIsEditing(!isEditing)
          }
        }}
        isEditing={isEditing}
        deleteButton={{
          onClick: (e) => {
            e.preventDefault()
            e.stopPropagation()
            handleDelete && handleDelete()
          }
        }}
        linkButtonContainer={{ ref }}
        {...props}
      />
    </div>
  )
}

const LinkItem = React.forwardRef(LinkItem_)
export default LinkItem