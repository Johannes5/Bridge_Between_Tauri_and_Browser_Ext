// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { closestCenter, DndContext } from "@dnd-kit/core"
import {
  horizontalListSortingStrategy,
  SortableContext
} from "@dnd-kit/sortable"
import { HTMLElementRefOf } from "@plasmicapp/react-web"
import * as React from "react"

import AddingForm from "~/components/AddingForm"
import CircleButton from "~/components/CircleButton"
import Accordion from "~/components/custom/Accordion"
import LinkItem from "~/components/LinkItem"
import PlasmicLimitAndStopPopup, {
  DefaultLimitAndStopPopupProps
} from "~/components/plasmic/short_stop/PlasmicLimitAndStopPopup"
import QuoteItem from "~/components/QuoteItem"
import useLinks from "~/hooks/use-links"
import useQuotes from "~/hooks/use-quotes"
import {
  ILimit,
  IShortsLimit,
  IStopsLimit,
  IUrlLimit
} from "~/types/limits.types"
import { TPopupState } from "~/types/popup.types"
import { setCountdownRemnantToZero } from "~/utils/limit-countdown.utils"
import $messaging from "~/utils/messaging/index.utils"
import { getPopupType } from "~/utils/popup.utils"
import { getRandomCountdownExhaustedQuote } from "~/utils/quotes.utils"
import { readableTimestamp } from "~/utils/time.utils"

export interface PopupProps extends DefaultLimitAndStopPopupProps {
  logo: React.ReactNode
  limit: ILimit<IUrlLimit | IShortsLimit | IStopsLimit>
  popupState: TPopupState
  setPopupState: (popupState: TPopupState) => void
}

function Popup_(
  { logo, limit, popupState, setPopupState, ...props }: PopupProps,
  ref: HTMLElementRefOf<"div">
) {
  const randomCountdownQuoteRef = React.useRef(
    getRandomCountdownExhaustedQuote()
  )
  const {
    quotes,
    updateQuote,
    deleteQuote,
    calculateRows,
    singleRandomQuote,
    newQuotes,
    handleSetNewQuotes,
    handleSaveNewQuotes,
    existingQuotesContainerRef,
    customisingQuotes,
    setCustomisingQuotes
  } = useQuotes()

  const {
    links,
    updateLink,
    deleteLink,
    newLink,
    setNewLink,
    addNewLink,
    onDragEnd,
    customisingLinks,
    setCustomisingLinks,
    showAddLinkForm,
    setShowAddLinkForm
  } = useLinks()

  async function handleLeaveSite() {
    await handleEnterSite()
    const { closed } = await $messaging.closeTab()
    if (closed) return

    alert("Error while trying to close the tab, redirecting to google now.")
    window.location.href = "https://www.google.com"
  }

  async function handleEnterSite() {
    setPopupState({
      showPopup: false,
      popupType: getPopupType(limit?.type),
      limit: limit
    })
    await setCountdownRemnantToZero(limit)
  }

  const shortsPeriod =
    (limit?.type === "shorts" && (limit?.limit as IShortsLimit)?.period) || ""

  const doneCounting =
    limit?.type === "stops"
      ? limit?.countdown?.remnant === 100
      : limit?.countdown?.remnant <= 0

  return (
    <PlasmicLimitAndStopPopup
      id="extensionPopupComponent"
      root={{
        ref
      }}
      innerContainer={{
        style: {
          maxHeight: "90vh",
          overflowY: "scroll"
        }
        // className: "hide-scrollbar"
      }}
      limitUrl={
        <div>
          {limit?.type === "shorts"
            ? `Youtube shorts ${shortsPeriod === "day" ? "daily" : shortsPeriod === "week" ? "weekly" : shortsPeriod === "month" ? "monthly" : "hourly"} limit of ${(limit?.limit as IShortsLimit)?.watchedShortsLimit}`
            : (limit?.limit as IUrlLimit | IStopsLimit)?.url}
        </div>
      }
      logo={logo}
      stopFinal={limit?.type === "stops" && doneCounting}
      enterButton={{
        onClick: handleEnterSite,
      }}
      leaveButton={{
        autoFocus: true,
        onClick: handleLeaveSite
      }}
      isYoutube={window.location.href.includes("youtube.com")}
      searchYoutubeTextInput={{
        onKeyDown: (e) => {
          if (e.key === "Enter") {
            e.preventDefault()
            e.stopPropagation()
            const value = (e?.target?.value || "").replace(" ", "+")
            window.location.href = `https://www.youtube.com/results?search_query=${value}`
            handleEnterSite();
          }
        }
      }}
      limitedEnterButton={{ style: { display: "none" } }}
      stop={limit?.type === "stops" && limit?.countdown.remnant > 0}
      stopCountdown={
        limit?.type === "stops" && doneCounting
          ? randomCountdownQuoteRef?.current
          : `${readableTimestamp(limit?.countdown.remnant)}`
      }
      stopCountdownContainer={{
        style: {
          fontSize: limit?.type === "stops" && doneCounting ? 40 * 0.7 : 40,
          color: "white",
          textAlign: "center"
        }
      }}
      accordionSlot={<Accordion />}
      quoteText={
        singleRandomQuote?.quote ||
        "Sorry, no quote to display. Just do the thing!"
      }
      quoteTextContainer={{ style: { color: "white" } }}
      quoteCustomisationHeadlineContainer={{
        style: {
          minHeight: "80px",
          display: "flex",
          flexDirection: "column",
          justifyContent: "center"
        }
      }}
      addedQuotesContainer={{
        style: { minHeight: "10vh", maxHeight: "15vh", overflow: "hidden" }
      }}
      randomQuotes={true}
      existingQuotesContainer={{
        ref: existingQuotesContainerRef,
        style: {
          maxHeight: "50vh",
          overflowY: "scroll",
          gap: 20
        }
      }}
      existingQuotesSlot={
        <div className="space-y-5">
          {quotes.map((item, i) => (
            <QuoteItem
              key={i}
              onDelete={() => deleteQuote(item?.uuid)}
              quoteText={<div>{item?.quote}</div>}
              textareaValue2={item?.quote}
              calculateRows={calculateRows}
              onTextareaValueChange2={(txt) => updateQuote(item?.uuid, txt)}
            />
          ))}
        </div>
      }
      addedQuotesSlot={newQuotes.map((newQuote, i) => (
        <QuoteItem
          quoteTextareaPlaceholder="Enter new quote"
          isEditing={i === 0 || i === 1}
          quoteText={newQuote ? <div>{newQuote}</div> : undefined}
          textareaValue2={newQuote}
          // onDelete={i === 0 ? undefined : () => removeQuoteFromNewQuotes(i)}
          showDelete={i !== 0}
          onTextareaValueChange2={(txt) => handleSetNewQuotes(txt, i)}
          calculateRows={calculateRows}
          saveNewQuotes={handleSaveNewQuotes}
        />
      ))}
      customisingLinks={customisingLinks}
      customisingQuotes={customisingQuotes}
      circleButton={{
        onClick: handleSaveNewQuotes
      }}
      quotesLabelButton={{
        onClick: () => {
          if (!customisingQuotes) setCustomisingLinks(false)
          setCustomisingQuotes(!customisingQuotes)
          // if (customisingQuotes) saveNewQuotes();
        }
      }}
      linksLabelButton={{
        onClick: () => setCustomisingLinks(!customisingLinks)
      }}
      customizeLinksButton={{
        handleClickBlueButton: () => {
          if (!customisingLinks) setCustomisingQuotes(false)
          setCustomisingLinks(!customisingLinks)
        },
        className:
          "border border-transparent transition-all duration-300 rounded hover:border-[rgb(66,87,187)]"
      }}
      linksSlot={
        <div className="flex items-center flex-wrap w-full max-w-full">
          <DndContext collisionDetection={closestCenter} onDragEnd={onDragEnd}>
            <SortableContext
              items={links.map((link) => ({ ...link, id: link.uuid }))}
              strategy={horizontalListSortingStrategy}>
              {links.map((link) => (
                <LinkItem
                  className="mr-3 my-1"
                  key={JSON.stringify(link)}
                  updateLink={(name: string, url: string) =>
                    updateLink(link?.uuid, name, url)
                  }
                  linkUrl={link?.url}
                  linkName={link?.name}
                  handleDelete={() => deleteLink(link?.uuid)}
                  customizingLinks={customisingLinks}
                  link={link}
                />
              ))}
            </SortableContext>
          </DndContext>
          {customisingLinks && (
            <div className="flex flex-col justify-center p-3">
              {showAddLinkForm ? (
                <AddingForm
                  values={newLink}
                  handleChange={(key, value) =>
                    setNewLink({ ...newLink, [key]: value })
                  }
                  updateLink={() => {
                    addNewLink()
                    setShowAddLinkForm(false)
                  }}
                />
              ) : (
                <div onClick={() => setShowAddLinkForm(!showAddLinkForm)}>
                  <CircleButton />
                </div>
              )}
            </div>
          )}
        </div>
      }
      links={!customisingQuotes}
      excuseSection={{
        limit,
        popupState,
        setPopupState
      }}
      excuses={true}
      innerContainerWrapper={{
        className: "!overflow-hidden"
      }}
      {...props}
    />
  )
}

const LimitPopup = React.forwardRef(Popup_)
export default LimitPopup
