;

// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import { ChevronsUpDown } from "lucide-react";
import { useState } from "react";



import { Popover, PopoverContent, PopoverTrigger } from "~/components/custom/ui/popover";
import TextInput from "~/components/TextInput";





;














export interface SelectProps {
  options?: { label: string; key: string; value: string | number }[]
  value?: string
  defaultSelected?: string
  showInput?: boolean
  style?: Record<string, any>
  selectedLabelStyle?: Record<string, any>
  beforeOnChange?: (v: string) => string
  beforeValueRender?: (v: string) => string
  onChange: (v: string) => void
}

function Select({
  value,
  options,
  style,
  defaultSelected,
  showInput,
  beforeOnChange,
  beforeValueRender,
  selectedLabelStyle,
  ...props
}: SelectProps) {
  const [open, setOpen] = useState(false)
  const selected = (options || []).find(
    (opt) =>
      _resolveValue(opt.value) === _resolveValue(value || defaultSelected)
  )
  const valueToDisplay = beforeValueRender
    ? value
      ? beforeValueRender(`${value}`)
      : selected?.label
    : value

  showInput = !!showInput || !selected

  const [inputValue, setInputValue] = useState(valueToDisplay)

  function handleInputValueChange(e) {
    let value = e?.target?.value
    setInputValue(value)
  }

  function handleInputBlur(e) {
    let value = e?.target?.value

    if (beforeOnChange) value = beforeOnChange(value)
    props?.onChange && props.onChange(value)
  }
  return (
    <Popover open={open} onOpenChange={setOpen}>
      <div
        className={`w-full flex gap-x-1 cursor-pointer text-white justify-between items-center px-2 py-1.5 bg-[#171717] rounded ${showInput ? "border border-[#444]" : ""}`}
        style={style}>
        {showInput ? (
          <span className="flex justify-between items-center gap-x-1 w-full">
            <TextInput
              isCompact
              onMouseDownCapture={(e) => e.stopPropagation()}
              onPointerDownCapture={(e) => e.stopPropagation()}
              value={inputValue}
              // defaultValue={inputValue ? undefined : valueToDisplay}
              onChange={handleInputValueChange}
              onBlur={handleInputBlur}
              type="number"
              className="!outline-none !shadow-none"
              color="transparent"
              style={{
                color: "white",
                width: "30px",
                height: "24px"
              }}
            />
            <PopoverTrigger asChild className="p-0">
              <ChevronsUpDown className="p-0 m-0 h-4 w-4 shrink-0 opacity-50" />
            </PopoverTrigger>
          </span>
        ) : (
          <PopoverTrigger asChild className="p-0">
            <span className="flex justify-between items-center gap-x-1 w-full">
              <span style={selectedLabelStyle}>{selected?.label}</span>
              <ChevronsUpDown className="h-4 w-4 shrink-0 opacity-50" />
            </span>
          </PopoverTrigger>
        )}
      </div>
      <PopoverContent className="w-full !p-0 overflow-y-scroll bg-[#171717] border-none min-w-44">
        {options?.map((option) => (
          <div
            key={option?.key}
            className="cursor-pointer py-1.5 px-3 hover:bg-[#272727] transition-all duration-300 text-white w-full text-base"
            onClick={() => {
              if (props?.onChange) props?.onChange(`${option?.value}`)
              setOpen(false)
            }}>
            {option?.label}
          </div>
        ))}
      </PopoverContent>
    </Popover>
  )
}

export default Select

// ------- Sub Utils ---------
const _resolveValue = (value: any) => {
  if (typeof value === "number" || typeof value === "boolean") return `${value}`
  if (typeof value === "string") return value
  return JSON.stringify(value)
}